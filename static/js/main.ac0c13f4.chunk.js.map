{"version":3,"sources":["context/AuthContext.js","types/authTypes.js","pages/LoginScreen.jsx","components/Navbar.jsx","routes/AppRouter.jsx","routes/PublicRouter.jsx","routes/PrivateRouter.jsx","routes/LoginRouter.jsx","reducers/AuthReducer.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["AuthContext","createContext","authTypes","LoginScreen","dispatch","useContext","history","useHistory","className","src","alt","onClick","type","push","Navbar","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","activeClassName","aria-current","to","replace","BassScreen","lazy","GuitarScreen","SearchScreen","InstrumentScreen","AppRouter","fallback","exact","path","component","PublicRouter","auth","Component","rest","props","log","PrivateRouter","LoginRouter","AuthReducer","state","action","init","JSON","parse","localStorage","getItem","App","useReducer","useEffect","setItem","stringify","Provider","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","root","document","getElementById","hasChildNodes","hydrate","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ac0c13f4.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const AuthContext = createContext()","export const authTypes = {\r\n    login: \"login\",\r\n    logout: \"logout\",\r\n}","import React, { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { authTypes } from '../types/authTypes';\r\n\r\n\r\n\r\nconst LoginScreen = () => {\r\n    const { dispatch } = useContext(AuthContext);\r\n    \r\n    const history = useHistory();\r\n\r\n    const handleLogin = () => {\r\n        dispatch({ type: authTypes.login });\r\n        history.push(\"/\");\r\n    };\r\n    \r\n    return (\r\n        <div className=\"container mt-3 text-center\">\r\n            <img src=\"/assets/animate.gif\" alt=\"animation\" />\r\n            <h1 className=\"my-1\">Login Sreen</h1>\r\n            <button className=\"btn btn-primary\" onClick={handleLogin}> Login </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginScreen;\r\n","import React, { useContext } from 'react';\r\nimport { NavLink, useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { authTypes } from \"../types/authTypes\";\r\n\r\nconst Navbar = () => {\r\n\r\n  const history = useHistory();\r\n  \r\n  const { dispatch } = useContext(AuthContext);\r\n\r\n  const handleLogout = () => {\r\n    dispatch({ type: authTypes.logout });\r\n    history.replace(\"/login\");\r\n  };\r\n\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <div className=\"container-fluid\">\r\n        <h2 className=\"navbar-brand\">GnB App</h2>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <NavLink activeClassName=\"active text-danger\" className=\"nav-link active\" aria-current=\"page\" to=\"/guitars\">Guitars</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink activeClassName=\"active text-danger\" className=\"nav-link active\" aria-current=\"page\" to=\"/basses\">Basses</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink activeClassName=\"active text-danger\" className=\"nav-link active\" aria-current=\"page\" to=\"/search\">Search</NavLink>\r\n            </li>\r\n              \r\n          </ul>\r\n          <div className=\"d-flex\">\r\n            <button className=\"btn btn-danger\" onClick={handleLogout} >Logout</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { lazy, Suspense } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nimport Navbar from '../components/Navbar';\r\n\r\nconst BassScreen = lazy(() => import('../pages/BassScreen'));\r\nconst GuitarScreen = lazy(() => import('../pages/GuitarScreen'));\r\nconst SearchScreen = lazy(() => import('../pages/SearchScreen'));\r\nconst InstrumentScreen = lazy(() => import('../pages/InstrumentScreen'));\r\n\r\nconst AppRouter = () => {\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            <Suspense fallback={<h1 className=\"text-center\">Loading...</h1>}>\r\n            \r\n                <Switch>\r\n                    <Route exact path=\"/guitars\" component={GuitarScreen} />\r\n                    <Route exact path=\"/basses\" component={BassScreen} />\r\n                    <Route exact path=\"/search\" component={SearchScreen} />\r\n\r\n                    <Route exact path=\"/instrument/:id\" component={InstrumentScreen} />\r\n                \r\n                    <Redirect to=\"/guitars\" />\r\n                </Switch>\r\n            </ Suspense>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AppRouter\r\n","import React from 'react'\r\nimport { Redirect, Route } from 'react-router-dom'\r\n\r\n\r\nconst PublicRouter = ({ auth, component: Component, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            component={(props) =>\r\n                !auth.log ? <Component {...props} /> : <Redirect to=\"/\" />\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default PublicRouter;\r\n","import React from 'react'\r\nimport {Redirect, Route } from 'react-router-dom'\r\n\r\nconst PrivateRouter = ({ auth, component: Component, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            component={(props) =>\r\n                auth.log ? <Component {...props} /> : <Redirect to=\"/login\" />} />\r\n    );\r\n};\r\n\r\nexport default PrivateRouter\r\n","import React, { useContext } from 'react';\r\nimport { BrowserRouter as Router, Switch} from 'react-router-dom';\r\n\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nimport LoginScreen from '../pages/LoginScreen';\r\nimport AppRouter from './AppRouter';\r\nimport PublicRouter from './PublicRouter';\r\nimport PrivateRouter from './PrivateRouter';\r\n\r\n\r\nconst LoginRouter = () => {\r\n    \r\n    const { log } = useContext(AuthContext)\r\n\r\n    return (\r\n        <Router>\r\n            \r\n            <Switch>\r\n\r\n                <PublicRouter path=\"/login\" auth={log} component={ LoginScreen } />\r\n                <PrivateRouter path=\"/\" auth={log} component={ AppRouter} />\r\n\r\n            </Switch>\r\n       </Router>\r\n    )\r\n}\r\n\r\nexport default LoginRouter\r\n","import { authTypes } from \"../types/authTypes\";\r\n\r\nexport const AuthReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case authTypes.login:\r\n            return { log: true };\r\n        case authTypes.logout:\r\n            return { log: false };\r\n            \r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { useEffect, useReducer } from \"react\"\n\nimport LoginRouter from \"./routes/LoginRouter\"\n\nimport { AuthReducer } from \"./reducers/AuthReducer\"\nimport { AuthContext } from \"./context/AuthContext\"\n\nconst init = () => {\n  return JSON.parse(localStorage.getItem('log')) || { log: false }\n};\n\nconst App = () => {\n\n\n  const [log, dispatch] = useReducer(AuthReducer, {}, init);\n\n  useEffect(() => {\n    \n    localStorage.setItem('log', JSON.stringify(log));\n  }, [log])\n  \n  return (\n    <AuthContext.Provider value={{log, dispatch}}>\n      <LoginRouter />\n  </AuthContext.Provider>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { hydrate, render } from \"react-dom\";\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = document.getElementById('root');\n\nif (root.hasChildNodes()) {\n  hydrate(<App />, root);\n} else {\n  render(<App />, root);\n}\n\n\nserviceWorkerRegistration.register();\n\nreportWebVitals();\n"],"sourceRoot":""}